version: '3.5'

services:

  postgres-1:
    image: ntw/postgres
    container_name: postgres-1
    hostname: postgres-1
    network_mode: "host"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./logs/postgres-1:/var/log/postgresql
      - ./data/postgres-1:/var/lib/postgresql/data
    command: postgres -c shared_buffers=128MB -c max_connections=50


  cassandra-1:
    image: ntw/cassandra
    container_name: cassandra-1
    hostname: cassandra-1
    network_mode: "host"
    environment:
      - JVM_OPTS=-Xms512M -Xmx1024M
      - SCHEMA_SEED_INSTANCE=cassandra-1
    volumes:
      - ./logs/cassandra-1:/var/log/cassandra
      - ./data/cassandra-1:/var/lib/cassandra
    entrypoint: /docker-entrypoint-second.sh

  cassandra-2:
    image: ntw/cassandra
    container_name: cassandra-2
    hostname: cassandra-2
    network_mode: "host"
    environment:
      - JVM_OPTS=-Xms512M -Xmx1024M
      - SCHEMA_SEED_INSTANCE=cassandra-1
      - CASSANDRA_SEEDS=cassandra-1
    volumes:
      - ./logs/cassandra-2:/var/log/cassandra
      - ./data/cassandra-2:/var/lib/cassandra
    entrypoint: /docker-entrypoint-second.sh


  eureka-1:
    image: ntw/eureka
    container_name: eureka-1
    hostname: eureka-1
    network_mode: "host"
    environment:
      - JAVA_OPTIONS=-Xmx512M
    volumes:
      - ./logs/eureka-1:/usr/local/tomcat/logs


  lb-web-1:
    image: ntw/lb-web
    container_name: lb-web-1
    hostname: lb-web-1
    network_mode: "host"
    environment:
      - SERVER_HOSTS=web-1,web-2
      - SERVER_PORT=8000
    volumes:
      - ./logs/lb-web-1:/var/log/oms


  web-1:
    image: ntw/web
    container_name: web-1
    hostname: web-1
    network_mode: "host"
    env_file: .env
    environment:
      - REST_HOST=lb-rest-1
      - REST_PORT=80
    volumes:
      - ./logs/web-1:/var/log/oms
    command: python3 manage.py runserver 0.0.0.0:8000

  web-2:
    image: ntw/web
    container_name: web-2
    hostname: web-2
    network_mode: "host"
    env_file: .env
    environment:
      - REST_HOST=lb-rest-1
      - REST_PORT=80
    volumes:
      - ./logs/web-2:/var/log/oms
    command: python3 manage.py runserver 0.0.0.0:8000


  lb-rest-1:
    image: ntw/lb-rest
    container_name: lb-rest-1
    hostname: lb-rest-1
    network_mode: "host"
    environment:
      - SERVER_HOSTS=gateway-svc-1,gateway-svc-2
      - SERVER_PORT=8080
    volumes:
      - ./logs/lb-rest-1:/var/log/oms


  gateway-svc-1:
    image: ntw/rest
    container_name: gateway-svc-1
    hostname: gateway-svc-1
    network_mode: "host"
    env_file: .env
    environment:
      - eureka.instance.hostname=gateway-svc-1
      - server.threadPool.threads.maximum=20
    volumes:
      - ./logs/gateway-svc-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh GatewaySvc

  gateway-svc-2:
    image: ntw/rest
    container_name: gateway-svc-2
    hostname: gateway-svc-2
    network_mode: "host"
    env_file: .env
    environment:
      - eureka.instance.hostname=gateway-svc-2
      - server.threadPool.threads.maximum=20
    volumes:
      - ./logs/gateway-svc-2:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh GatewaySvc

  admin-svc-1:
    image: ntw/rest
    container_name: admin-svc-1
    hostname: admin-svc-1
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=admin-svc-1
      - database.type=ALL
    volumes:
      - ./logs/admin-svc-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh AdminSvc

  admin-svc-2:
    image: ntw/rest
    container_name: admin-svc-2
    hostname: admin-svc-2
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=admin-svc-2
      - database.type=ALL
    volumes:
      - ./logs/admin-svc-2:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh AdminSvc

  auth-svc-1:
    image: ntw/rest
    container_name: auth-svc-1
    hostname: auth-svc-1
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=auth-svc-1
      - database.type=CQL
    volumes:
      - ./logs/auth-svc-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh AuthSvc

  auth-svc-2:
    image: ntw/rest
    container_name: auth-svc-2
    hostname: auth-svc-2
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=auth-svc-2
      - database.type=CQL
    volumes:
      - ./logs/auth-svc-2:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh AuthSvc

  user-profile-svc-1:
    image: ntw/rest
    container_name: user-profile-svc-1
    hostname: user-profile-svc-1
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=user-profile-svc-1
      - database.type=CQL
    volumes:
      - ./logs/user-profile-svc-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh UserProfileSvc

  user-profile-svc-2:
    image: ntw/rest
    container_name: user-profile-svc-2
    hostname: user-profile-svc-2
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=user-profile-svc-2
      - database.type=CQL
    volumes:
      - ./logs/user-profile-svc-2:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh UserProfileSvc

  product-svc-1:
    image: ntw/rest
    container_name: product-svc-1
    hostname: product-svc-1
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=product-svc-1
      - database.type=CQL
    volumes:
      - ./logs/product-svc-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh ProductSvc

  product-svc-2:
    image: ntw/rest
    container_name: product-svc-2
    hostname: product-svc-2
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=product-svc-2
      - database.type=CQL
    volumes:
      - ./logs/product-svc-2:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh ProductSvc

  order-svc-1:
    image: ntw/rest
    container_name: order-svc-1
    hostname: order-svc-1
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=order-svc-1
      - database.type=SQL
    volumes:
      - ./logs/order-svc-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh OrderSvc

  order-svc-2:
    image: ntw/rest
    container_name: order-svc-2
    hostname: order-svc-2
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=order-svc-2
      - database.type=SQL
    volumes:
      - ./logs/order-svc-2:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh OrderSvc

  inventory-svc-1:
    image: ntw/rest
    container_name: inventory-svc-1
    hostname: inventory-svc-1
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=inventory-svc-1
      - database.type=SQL
    volumes:
      - ./logs/inventory-svc-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh InventorySvc

  inventory-svc-2:
    image: ntw/rest
    container_name: inventory-svc-2
    hostname: inventory-svc-2
    network_mode: "host"
    env_file: .env 
    environment:
      - eureka.instance.hostname=inventory-svc-2
      - database.type=SQL
    volumes:
      - ./logs/inventory-svc-2:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh InventorySvc
